MySQL高级部分
一，MySQL的安装(Linux环境下安装)
    1.检查当前系统是否安装过mysql
        指令:rpm -qa|grep mysql
        如果有先卸载mysql(没有就忽略)
        rpm -e mysql-libs(删除失败)
        强制删除:rpm -e -nodeps mysql-libs
    2.检查/tmp文件夹权限(目的:是否有全部权限)
        ll /
    3.把安装的文件拷贝到/opt目录下
    4.安装：
        rpm -ivh MySQL-client-5.5.54-1.linux2.6.x86_64.rpm
        rpm -ivh MySQL-server-5.5.54-1.linux2.6.x86_64.rpm
    出现以下提示：
        warning: user mysql does not exist - using root
        warning: group mysql does not exist - using root
        180812 11:06:25 [Note] Ignoring --secure-file-priv value as server is running with --bootstrap.
        180812 11:06:25 [Note] /usr/sbin/mysqld (mysqld 5.5.54) starting as process 4531 ...
        180812 11:06:25 [Note] Ignoring --secure-file-priv value as server is running with --bootstrap.
        180812 11:06:25 [Note] /usr/sbin/mysqld (mysqld 5.5.54) starting as process 4538 ...

        PLEASE REMEMBER TO SET A PASSWORD FOR THE MySQL root USER !
        To do so, start the server, then issue the following commands:

        /usr/bin/mysqladmin -u root password 'new-password'
        /usr/bin/mysqladmin -u root -h ys password 'new-password'

        Alternatively you can run:
        /usr/bin/mysql_secure_installation

        which will also give you the option of removing the test
        databases and anonymous user created by default.  This is
        strongly recommended for production servers.

        See the manual for more instructions.

        Please report any problems at http://bugs.mysql.com/
    6.查看mysql是否安装成功：
        mysqladmin --version
    7.启动mysql服务：
        service mysql start
    注意：启动过后查看mysql是否启动成功:ps -ef|grep mysql,
         若mysql服务启动了两个，则要通过:killall -9 mysql 杀死进程，然后重新启动mysql服务
    8.设置mysql的root密码：
        mysqladmin -u root password 'new-password'
    9.查看mysql的安装的相关文件：
        ps -ef|grep mysql
    10.找的mysql的配置文件并拷贝到/etc文件下并重命名my.cnf：
        cd /usr/share/mysql
        cp my-huge.cnf /etc/my.cnf
    11.查看mysql是否是开机自启动:
        chkconfig --list
    12.修改配置文件，使其支持中文：
        vim /etc/my.cnf
        加入以下的配置：
        [client]
        default-character-set=utf8
        [mysqld]
        character_set_server=utf8
        character_set_client=utf8
        collation-server=utf8_general_ci
        [mysql]
        default-character-set=utf8
        最后重启mysql服务
        service mysql restart
    注意：修改mysql服务器配置以后，之前建立的数据库还是用以前的字符集建立的
        ①查看数据库的建立的字符集：
            show create database 数据库名;
        ②查看表的建立的字符集:
            show create table 表名;
        ③修改数据库的字符集
            alter database 数据库名 character set 'utf8';
        ④修改表的字符集
            alter table user convert to character set 'utf8';
二，mysql配置相关文件说明：
    存放位置 /var/lib/mysql
    1.二进制日志文件log-bin:主从复制及备份恢复
    2.错误日志log-error:默认是关闭的，记录严重的警告和错误信息，每次启动和关闭的详细信息等。
    3.慢查询日志log:默认关闭，记录查询sql语句(调优用的)，如果开启会减少mysql的整体性能，因为记录日志也是需要消耗系统资源的。
    4.数据文件
        ①两个系统：
            1)windows:...\MySQLServer5.5\data目录下有很多数据库文件
            2)linux:默认路径:/var/lib/mysql 每个目录代表一个数据库
        ②Myisam存放方式：
            1)fmt 文件：存放表结构
            2)myd 文件：存放表数据
            3)myi 文件：存放表索引
        ③innodb存放方式：
            1)ibdata1
            2)frm 文件 ：存放表结构
            3)单独存放 ：
                show variables like 'innodb_file_per_table%';
                set global innodb_file_pre_table = 1 开启单独存放，推荐开启
三，MySQL的用户管理：
    1.创建用户：
        create user zhang3 identified by '123123';表示创建名称为zhang3的用户，密码设为123123；
    2.了解user表：
        ①查看用户：
            select host,user,password,select_priv,insert_priv,drop_priv from mysql.user;
        ②常见字段的意思：
            host:表示连接类型
                % 表示所有远程通过 TCP方式的连接
                IP 地址 如 (192.168.1.2,127.0.0.1) 通过制定ip地址进行的TCP方式的连接
                机器名 通过制定i网络中的机器名进行的TCP方式的连接
                ::1   IPv6的本地ip地址  等同于IPv4的 127.0.0.1
                localhost 本地方式通过命令行方式的连接 ，比如mysql -u xxx -p 123xxx 方式的连接。
            User:表示用户名
                同一用户通过不同方式链接的权限是不一样的。
            password:密码
                所有密码串通过 password(明文字符串) 生成的密文字符串。加密算法为MYSQLSHA1,不可逆 。
                mysql 5.7 的密码保存到 authentication_string 字段中不再使用password 字段。
            select_priv,insert_priv等 
                为该用户所拥有的权限。
    3.设置密码:
        ①修改当前用户的密码:
            set password =password('123456')
        ②修改某个用户的密码:
            update mysql.user set password=password('123456') where user='li4';
            flush privileges;#所有通过user表的修改，必须用该命令才能生效。
    4.修改用户:
        ①修改用户名：
            update mysql.user set user='li4' where user='wang5';
            flush privileges;   #所有通过user表的修改，必须用该命令才能生效。
    5.删除用户:
        drop user li4 ;
        不要通过delete from  user u where user='li4' 进行删除，系统会有残留信息保留。
四，MySQL的权限管理：
    1.授予权限：
         授权命令： 
            grant 权限1,权限2,…权限n on 数据库名称.表名称 to 用户名@用户地址 identified by ‘连接口令’;
            注意:该权限如果发现没有该用户，则会直接新建一个用户。
            比如:  
                grant select,insert,delete,drop on atguigudb.* to li4@localhost;
                #给li4用户用本地命令行方式下，授予atguigudb这个库下的所有表的插删改查的权限。

                grant all privileges on *.* to joe@'%'  identified by '123'; 
                #授予通过网络方式登录的的joe用户 ，对所有库所有表的全部权限，密码设为123.
    2.收回权限:
            ①查看当前用户权限
                show grants;
            ②收回权限命令： 
                revoke  权限1,权限2,…权限n on 数据库名称.表名称  from  用户名@用户地址 ;
                比如：
                    REVOKE ALL PRIVILEGES ON mysql.* FROM joe@localhost;
                    #收回全库全表的所有权限
                    REVOKE select,insert,update,delete ON mysql.* FROM joe@localhost;
                    #收回mysql库下的所有表的插删改查权限
                注意：必须用户重新登录后才能生效
    3.查看权限:
        ①查看当前用户权限
            show grants;
        ②查看某用户的全局权限
            select  * from user ;
        ③查看某用户的某库的权限
            select * from  db;
        ④查看某用户的某个表的权限
            select * from tables_priv; 
五，远程访问mysql：
    1.开放linux的3306端口：
        ①进入到防火墙的配置目录下：
        cd /etc/sysconfig/
        ②编辑iptables文件
        vim iptables
        添加以下配置
        A INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT
        ③重启防火墙
        service iptables restart
        ④查看防火墙
        service iptables status
    2.开放root用户的mysql远程连接：
        ①登录mysql服务器
            mysql -uroot -p密码
        ②查看user表中是否开放root用户远程访问
            use mysql;
            select host,user,password,select_priv from user;
        ③开启远程访问并赋予root用户所有的权限
            grant all privileges on *.* to root@'%' identified by '123456';
        注意：
            创建用户：create user 用户名;
            修改当前用户的密码:set password = password('123456');
            修改某个用户的密码:update mysql.user set password = password('123456') where user = 'li4';
            flush privileges; 所有通过user表的修改，必须用该命令才能生效
六，MySQL一些杂项配置:
    1.大小写的问题：
        查看是否大小写敏感：
            show variables like '%lower_case_table_names%'; 
            windows系统默认大小写不敏感，但是linux系统是大小写敏感的
        默认为0:
            大小写敏感。
        设置为1:
            大小写不敏感。创建的表，数据库都是以小写形式存放在磁盘上，对于sql语句都是转换为小写对表和DB进行查找。
        设置为2:
            创建的表和DB依据语句上格式存放，凡是查找都是转换为小写进行。 
        当想设置为大小写不敏感时:
            要在my.cnf这个配置文件 [mysqld] 中加入 lower_case_table_names = 1,然后重启服务器。
        注意：
            但是要在重启数据库实例之前就需要将原来的数据库和表转换为小写，否则将找不到数据库名。
    2.sql_mode:
        ①含义：
            查看sql_mode:show variables like 'sql_mode';
            sql_mode是个很容易被忽视的变量，默认值是空值，在这种设置下是可以允许一些非法操作的，
            比如允许一些非法数据的插入。在生产环境必须将这个值设置为严格模式，所以开发、测试环境的数据库也必须要设置，这样在开发测试阶段就可以发现问题。
        ②sql_mode常用值如下： 
            1) ONLY_FULL_GROUP_BY：
                对于GROUP BY聚合操作，如果在SELECT中的列，没有在GROUP BY中出现，
                那么这个SQL是不合法的，因为列不在GROUP BY从句中
            2) NO_AUTO_VALUE_ON_ZERO：
                该值影响自增长列的插入。默认设置下，插入0或NULL代表生成下一个自增长值。
                如果用户 希望插入的值为0，而该列又是自增长的，那么这个选项就有用了。
            3) STRICT_TRANS_TABLES：
                在该模式下，如果一个值不能插入到一个事务表中，则中断当前的操作，对非事务表不做限制
            4) NO_ZERO_IN_DATE：
                在严格模式下，不允许日期和月份为零
            5) NO_ZERO_DATE：
                设置该值，mysql数据库不允许插入零日期，插入零日期会抛出错误而不是警告。
            6) ERROR_FOR_DIVISION_BY_ZERO：
                在INSERT或UPDATE过程中，如果数据被零除，则产生错误而非警告。
                如果未给出该模式，那么数据被零除时MySQL返回NULL
            7) NO_AUTO_CREATE_USER：
                禁止GRANT创建密码为空的用户
            8) NO_ENGINE_SUBSTITUTION：
                如果需要的存储引擎被禁用或未编译，那么抛出错误。
                不设置此值时，用默认的存储引擎替代，并抛出一个异常
            9) PIPES_AS_CONCAT：
                将"||"视为字符串的连接操作符而非或运算符，
                这和Oracle数据库是一样的，也和字符串的拼接函数Concat相类似
            10) ANSI_QUOTES：
                启用ANSI_QUOTES后，不能用双引号来引用字符串，因为它被解释为识别符
            11) ORACLE：
                设置等同：
                    PIPES_AS_CONCAT,
                    ANSI_QUOTES,
                    IGNORE_SPACE,
                    NO_KEY_OPTIONS,
                    NO_TABLE_OPTIONS,
                    NO_FIELD_OPTIONS,
                    NO_AUTO_CREATE_USER.
七，MySQL逻辑架构：
    1.总体概述：
        和其它数据库相比，MySQL有点与众不同，它的架构可以在多种不同场景中应用并发挥良好作用。
        主要体现在存储引擎的架构上，插件式的存储引擎架构将查询处理和其它的系统任务以及数据的存储提取相分离。
        这种架构可以根据业务的需求和实际需要选择合适的存储引擎。
        ①连接层
            最上层是一些客户端和连接服务，包含本地sock通信和大多数基于客户端/服务端工具实现的类似于tcp/ip的通信。
            主要完成一些类似于连接处理、授权认证、及相关的安全方案。在该层上引入了线程池的概念，为通过认证安全接入的客户端提供线程。
            同样在该层上可以实现基于SSL的安全链接。服务器也会为安全接入的每个客户端验证它所具有的操作权限。
        ②服务层
            1)  Management Services & Utilities：
                系统管理和控制工具  
            2) SQL Interface: SQL接口
                接受用户的SQL命令，并且返回用户需要查询的结果。
                比如select from就是调用SQL Interface
            3) Parser: 解析器
                SQL命令传递到解析器的时候会被解析器验证和解析。 
            4) Optimizer: 查询优化器。
                SQL语句在查询之前会使用查询优化器对查询进行优化。 
                用一个例子就可以理解： select uid,name from user where  gender= 1;
                优化器来决定先投影还是先过滤。
            5) Cache和Buffer： 查询缓存。
                如果查询缓存有命中的查询结果，查询语句就可以直接去查询缓存中取数据。
                这个缓存机制是由一系列小缓存组成的。
                比如表缓存，记录缓存，key缓存，权限缓存等
                注意：缓存是为了提高读的性能，缓冲是为了提高写的性能。
        ③引擎层
            存储引擎层，存储引擎真正的负责了MySQL中数据的存储和提取，服务器通过API与存储引擎进行通信。
            不同的存储引擎具有的功能不同，这样我们可以根据自己的实际需要进行选取。
        ④存储层
            数据存储层，主要是将数据存储在运行于裸设备的文件系统之上，并完成与存储引擎的交互。
    2.查询的说明：
        首先，mysql的查询流程大致是：
            mysql客户端通过协议与mysql服务器建连接，发送查询语句，先检查查询缓存，如果命中，直接返回结果，否则进行语句解析,
            也就是说，在解析查询之前，服务器会先访问查询缓存(query cache)——它存储SELECT语句以及相应的查询结果集。
            如果某个查询结果已经位于缓存中，服务器就不会再对查询进行解析、优化、以及执行。它仅仅将缓存中的结果返回给用户即可，这将大大提高系统的性能。
        语法解析器和预处理：
            首先mysql通过关键字将SQL语句进行解析，并生成一颗对应的“解析树”。
            mysql解析器将使用mysql语法规则验证和解析查询；预处理器则根据一些mysql规则进一步检查解析数是否合法。
            查询优化器当解析树被认为是合法的了，并且由优化器将其转化成执行计划。一条查询可以有很多种执行方式，最后都返回相同的结果。
            优化器的作用就是找到这其中最好的执行计划。
            然后，mysql默认使用的BTREE索引，并且一个大致方向是:无论怎么折腾sql，至少在目前来说，mysql最多只用到表中的一个索引。
八，MySQL存储引擎：
    1.查看存储引擎：
        show engines;
    2.各个引擎的简介：
        1) InnoDB存储引擎
            InnoDB是MySQL的默认事务型引擎，它被设计用来处理大量的短期(short-lived)事务。
            除非有非常特别的原因需要使用其他的存储引擎，否则应该优先考虑InnoDB引擎。
        2) MyISAM存储引擎
            MyISAM提供了大量的特性，包括全文索引、压缩、空间函数(GIS)等，
            但MyISAM不支持事务和行级锁，有一个毫无疑问的缺陷就是崩溃后无法安全恢复。
        3) Archive引擎
            Archive存储引擎只支持INSERT和SELECT操作，在MySQL5.1之前不支持索引。
            Archive表适合日志和数据采集类应用。
            根据英文的测试结论来看，Archive表比MyISAM表要小大约75%，比支持事务处理的InnoDB表小大约83%。
        4) Blackhole引擎
            Blackhole引擎没有实现任何存储机制，它会丢弃所有插入的数据，不做任何保存。
            但服务器会记录Blackhole表的日志，所以可以用于复制数据到备库，或者简单地记录到日志。
            但这种应用方式会碰到很多问题，因此并不推荐。 
        5) CSV引擎 
            CSV引擎可以将普通的CSV文件作为MySQL的表来处理，但不支持索引。
            CSV引擎可以作为一种数据交换的机制，非常有用。
            CSV存储的数据直接可以在操作系统里，用文本编辑器，或者excel读取。
        6) Memory引擎
            如果需要快速地访问数据，并且这些数据不会被修改，重启以后丢失也没有关系，
            那么使用Memory表是非常有用。Memory表至少比MyISAM表要快一个数量级。
        7) Federated引擎
            Federated引擎是访问其他MySQL服务器的一个代理，尽管该引擎看起来提供了一种很好的跨服务器的灵活性，但也经常带来问题，因此默认是禁用的。
    3.MyISAM和InnoDB
        对比项             MyISAM              InnoDB
        外键               不支持                支持
        事务               不支持                支持
        行表锁             表锁，即使操作一        行锁，操作时只锁某
                          条记录也会锁住整        一行，不对其他行
                          个表，不适合高并        有影响，
                          发的操作               适合高并发的操作
        缓存               只缓存索引，不缓        不仅缓存索引还要
                          存真实数据             缓存真实数据，对
                                                内存要求较高，而
                                                且内存大小对性能
                                                有决定性的影响
        关注点             读性能                 并发写，事务
        默认安装            Y                     Y
        默认使用            N                     Y
        自带系统表使用       Y                     N
八，索引优化分析：
    1.性能下降SQL慢，执行时间长，等待时间长的原因:
        ①数据过多-----分库分表
        ②关联了太多的表，太多join-----sql优化
        ③没有充分利用到索引-------索引建立
        ④服务器调优及各个参数设置--------调整my.cnf
    2.常见的join查询：
        ①建表语句+插入数据:
            CREATE TABLE `t_dept`(
               `id` INT(11) NOT NULL AUTO_INCREMENT ,
               `deptName` VARCHAR(30) DEFAULT NULL ,
               `address` VARCHAR(40) DEFAULT NULL ,
               PRIMARY KEY(`id`)
            )ENGINE=INNODB AUTO_INCREMENT = 1 DEFAULT CHARSET = utf8;
             
            CREATE	TABLE `t_emp`(
                `id` INT(11) NOT NULL AUTO_INCREMENT ,
                `name` VARCHAR(20) DEFAULT NULL ,
                `age` INT(3) DEFAULT NULL ,
                `deptId` INT(11) DEFAULT NULL ,
                empno INT NOT NULL ,
                PRIMARY KEY(`id`)
            )ENGINE=INNODB AUTO_INCREMENT = 1 DEFAULT CHARSET = utf8;

            INSERT INTO t_dept(deptName,address) VALUES('华山','华山');
            INSERT INTO t_dept(deptName,address) VALUES('丐帮','洛阳');
            INSERT INTO t_dept(deptName,address) VALUES('峨眉','峨眉山');
            INSERT INTO t_dept(deptName,address) VALUES('武当','武当山');
            INSERT INTO t_dept(deptName,address) VALUES('明教','光明顶');
            INSERT INTO t_dept(deptName,address) VALUES('少林','少林寺');
             
            INSERT INTO t_emp(NAME,age,deptId,empno) VALUES('风清扬',90,1,100001);
            INSERT INTO t_emp(NAME,age,deptId,empno) VALUES('岳不群',50,1,100002);
            INSERT INTO t_emp(NAME,age,deptId,empno) VALUES('令狐冲',24,1,100003);
            INSERT INTO t_emp(NAME,age,deptId,empno) VALUES('洪七公',70,2,100004);
            INSERT INTO t_emp(NAME,age,deptId,empno) VALUES('乔峰',35,2,100005);
            INSERT INTO t_emp(NAME,age,deptId,empno) VALUES('灭绝师太',70,3,100006);
            INSERT INTO t_emp(NAME,age,deptId,empno) VALUES('周芷若',20,3,100007);
            INSERT INTO t_emp(NAME,age,deptId,empno) VALUES('张三丰',100,4,100008);
            INSERT INTO t_emp(NAME,age,deptId,empno) VALUES('张无忌',25,5,100009);
            INSERT INTO t_emp(NAME,age,deptId,empno) VALUES('韦小宝',18,NULL,100010);
        ②7种join语句:     
            1)所有有门派的人员信息
                SELECT a.name ,b.deptname FROM t_emp a INNER JOIN t_dept b ON a.deptId = b.id;
            2)列出所有用户，并显示其机构信息
                SELECT a.name ,b.deptname FROM t_emp a Left JOIN t_dept b ON a.deptId = b.id;
            3)列出所有门派
                SELECT * FROM t_dept;
            4)所有没入门派的人员
                SELECT a.name ,b.deptname FROM t_emp a Left JOIN t_dept b ON a.deptId = b.id WHERE b.id is NULL;
            5)所有没人入的门派
                SELECT d.deptName FROM t_dept d LEFT JOIN t_emp e ON d.id = e.deptId WHERE e.id IS NULL;
            6)列出所有人员和机构的对照关系
                SELECT a.name ,b.deptname FROM t_emp a LEFT JOIN t_dept b ON a.deptId = b.id
                UNION
                SELECT a.name,b.deptName FROM t_dept b LEFT JOIN t_emp a ON a.deptId = b.id WHERE a.name IS NULL;
            7)列出所有没入派的人员和没人入的门派
                SELECT a.name ,b.deptname FROM t_emp a LEFT JOIN t_dept b ON a.deptId = b.id WHERE b.id IS NULL
                UNION
                SELECT a.name,b.deptName FROM t_dept b LEFT JOIN t_emp a ON a.deptId = b.id WHERE a.name IS NULL;
            添加字段掌门人并插入数据：
                ALTER TABLE `t_dept` ADD CEO INT(11);

                UPDATE t_dept SET ceo = 2 WHERE id=1;
                UPDATE t_dept SET ceo = 4 WHERE id=2;
                UPDATE t_dept SET ceo = 6 WHERE id=3;
                UPDATE t_dept SET ceo = 8 WHERE id=4;
                UPDATE t_dept SET ceo = 9 WHERE id=5;
            求各个门派对应的掌门人名称:
                SELECT b.deptname,a.name FROM t_dept b INNER JOIN t_emp a ON b.CEO = a.id;
            求所有当上掌门人的平均年龄:
                SELECT AVG(a.age) FROM t_dept b INNER JOIN t_emp a ON b.CEO = a.id;
            求所有人物对应的掌门名称:
                1)自己的写法:
                    SELECT a.name,t.name 掌门人
                    FROM t_emp t
                    RIGHT JOIN(
                        SELECT e.name,CEO
                        FROM t_emp e
                        LEFT JOIN t_dept d
                        ON e.deptId = d.id
                    ) a
                    ON a.ceo = t.id;
                2)
                    SELECT a.name,cb.name ceoname
                    FROM t_emp a
                    LEFT JOIN(
                        SELECT b.id ,b.ceo,c.name
                        FROM t_emp c
                        INNER JOIN t_dept b
                    	ON b.CEO = c.id
                    )cb
                    ON cb.id = a.deptId;
                3)
                    SELECT ab.name,c.name ceoname
                    FROM(
                        SELECT a.name,b.ceo
                        FROM t_emp a
                        LEFT JOIN t_dept b
                        ON a.deptId = b.id
                    )ab
                    LEFT JOIN t_emp c
                    ON c.id = ab.ceo;
                4)
                    SELECT a.name,(
                        SELECT c.name
                        FROM t_emp c
                        WHERE c.id = b.ceo
                        ) ceoname
                    FROM t_emp a
                    LEFT JOIN t_dept b
                    ON a.deptId = b.id;
                5)
                    SELECT a.name,c.name ceoname
                    FROM t_emp a
                    LEFT JOIN t_dept b
                    ON a.deptId = b.id
                    LEFT JOIN t_emp c
                    ON b.CEO = c.id;

