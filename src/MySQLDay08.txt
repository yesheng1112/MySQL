MySQL高级部分
一.索引的简介:
    1.是什么?
        1)官方定义：
            索引（Index）是帮助MySQL高效获取数据的数据结构。
            可以得到索引的本质：索引是数据结构。
        2)简单理解:
            排好序的快速查找数据结构。
            注意:数据库系统还维护着满足特定查找算法的数据结构。
        3)存储地方:
            以索引文件的形式存储在磁盘上。
    2.优势:
        1)类似大学图书馆建书索引，提高数据检索的效率，降低数据库的IO成本。
        2)通过索引列数据进行排序，降低数据排序的成本，降低了CPU的消耗。
    3.劣势:
        1)虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。
        因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件每次更新添加了索引列的字段，
        都会调整因为更新所带来的键值变化后的索引信息
        2)实际上索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录，
        所以索引列也是要占用空间的。
    4.mysql的索引结构:
        1)BTree索引:
            二叉树数据结构的一种改进，确保每次二叉树都是平衡的。
        2)B+Tree索引:
            在BTree基础上去除了每个节点上的指向数据块的指针。只保留了最底下节点的指向数据块的指针。
            注意:BTree与B+Tree的区别:
                ①B-树的关键字和记录是放在一起的，叶子节点可以看作外部节点，不包含任何信息；
                B+树的非叶子节点中只有关键字和指向下一个节点的索引，记录只放在叶子节点中。
                ②在B-树中，越靠近根节点的记录查找时间越快，只要找到关键字即可确定记录的存在；
                而B+树中每个记录的查找时间基本是一样的，都需要从根节点走到叶子节点，而且在叶子节点中还要再比较关键字。
                从这个角度看B-树的性能好像要比B+树好，而在实际应用中却是B+树的性能要好些。
                因为B+树的非叶子节点不存放实际的数据，这样每个节点可容纳的元素个数比B-树多，树高比B-树小，这样带来的好处是减少磁盘访问次数。
                尽管B+树找到一个记录所需的比较次数要比B-树多，但是一次磁盘访问的时间相当于成百上千次内存比较的时间，
                因此实际中B+树的性能可能还会好些，而且B+树的叶子节点使用指针连接在一起，方便顺序遍历（例如查看一个目录下的所有文件，一个表中的所有记录等），
                这也是很多数据库和文件系统使用B+树的缘故。
            问:为什么说B+树比B-树更适合实际应用中操作系统的文件索引和数据库索引？
                ①B+树的磁盘读写代价更低。B+树的内部结点并没有指向关键字具体信息的指针。
                因此其内部结点相对B 树更小。如果把所有同一内部结点的关键字存放在同一盘块中，那么盘块所能容纳的关键字数量也越多。
                一次性读入内存中的需要查找的关键字也就越多。相对来说IO读写次数也就降低了。 
                ②B+树的查询效率更加稳定。由于非终结点并不是最终指向文件内容的结点，而只是叶子结点中关键字的索引。
                所以任何关键字的查找必须走一条从根结点到叶子结点的路。所有关键字查询的路径长度相同，导致每一个数据的查询效率相当。
        3)聚簇索引与非聚簇索引:
            ①定义:
                聚簇索引并不是一种单独的索引类型，而是一种数据存储方式。
                术语‘聚簇’表示数据行和相邻的键值进错的存储在一起。
            ②聚簇索引的好处：
                按照聚簇索引排列顺序，查询显示一定范围数据的时候，由于数据都是紧密相连，数据库不不用从多个数据块中提取数据，所以节省了大量的io操作。
            ③聚簇索引的限制：
                对于mysql数据库目前只有innodb数据引擎支持聚簇索引，而Myisam并不支持聚簇索引。
                由于数据物理存储排序方式只能有一种，所以每个Mysql的表只能有一个聚簇索引。一般情况下就是该表的主键。
                为了充分利用聚簇索引的聚簇的特性，所以innodb表的主键列尽量选用有序的顺序id，而不建议用无序的id，比如uuid这种。
            注意:主键可以不连续，但是必须是有序的。
        4)full-text全文索引:
            全文索引（也称全文检索）是目前搜索引擎使用的一种关键技术。它能够利用【分词技术】等多种算法智能分析出文本文字中关键词的频率和重要性，
            然后按照一定的算法规则智能地筛选出我们想要的搜索结果。
    5.mysql索引分类:
        1)单值索引:
            即一个索引只包含单个列，一个表可以有多个单列索引。
            语法:
                ①随表一起建索引：
                    CREATE TABLE customer(
                        id INT(10) UNSIGNED AUTO_INCREMENT,
                        customer_no VARCHAR(200),
                        customer_name VARCHAR(200),
                        PRIMARY KEY(id),
                        KEY(customer_name)
                    );
                ②单独建单值索引：
                    CREATE INDEX idx_customer_name ON customer(customer_name); 
                ③删除索引：
                    DROP INDEX idx_customer_name on customer;
        2)唯一索引:
            索引列的值必须唯一，但允许有空值。
            语法:
                ①随表一起建索引：
                CREATE TABLE customer (
                    id INT(10) UNSIGNED  AUTO_INCREMENT ,
                    customer_no VARCHAR(200),
                    customer_name VARCHAR(200),
                    PRIMARY KEY(id),
                    KEY (customer_name),
                    UNIQUE (customer_no)
                );
                ②单独建唯一索引：
                    CREATE UNIQUE INDEX idx_customer_no ON customer(customer_no); 
                ③删除索引：
                    DROP INDEX idx_customer_no on customer;
        3)主键索引:
            设定为主键后数据库会自动建立索引，innodb为聚簇索引
            语法:
               ①随表一起建索引：
               CREATE TABLE customer (
                    id INT(10) UNSIGNED  AUTO_INCREMENT ,
                    customer_no VARCHAR(200),
                    customer_name VARCHAR(200),
                    PRIMARY KEY(id) 
               );

               CREATE TABLE customer2 (
                   id INT(10) UNSIGNED   ,
                   customer_no VARCHAR(200),
                   customer_name VARCHAR(200),
                   PRIMARY KEY(id) 
               );
               ②单独建主键索引：
                    ALTER TABLE customer add PRIMARY KEY customer(customer_no);  
               ③删除建主键索引：
                    ALTER TABLE customer drop PRIMARY KEY ;  
               ④修改建主键索引：
                    必须先删除掉(drop)原索引，再新建(add)索引
        4)复合索引:
            即一个索引包含多个列。
            语法:
                ①随表一起建索引：
                CREATE TABLE customer (
                    id INT(10) UNSIGNED  AUTO_INCREMENT ,
                    customer_no VARCHAR(200),
                    customer_name VARCHAR(200),
                    PRIMARY KEY(id),
                    KEY (customer_name),
                    UNIQUE (customer_name),
                    KEY (customer_no,customer_name)
                );
                ②单独建索引：
                    CREATE  INDEX idx_no_name ON customer(customer_no,customer_name); 
                ③删除索引：
                    DROP INDEX idx_no_name  on customer ;
        5)基本语法:
            创建:
                create [unique] index [indexname] on table_name(column)
            删除:
                drop index [indexname] on mytable;
            查看:
                show index from table_name\G;
            使用alter命令:
                有四种方式来添加数据表的索引：
                    ALTER TABLE tbl_name ADD PRIMARY KEY (column_list):
                    该语句添加一个主键，这意味着索引值必须是唯一的，且不能为NULL。

                    ALTER TABLE tbl_name ADD UNIQUE index_name (column_list):
                    这条语句创建索引的值必须是唯一的（除了NULL外，NULL可能会出现多次）。

                    ALTER TABLE tbl_name ADD INDEX index_name (column_list):
                    添加普通索引，索引值可出现多次。

                    ALTER TABLE tbl_name ADD FULLTEXT index_name (column_list):
                    该语句指定了索引为 FULLTEXT ，用于全文索引。
    6.那些情况下需要创建索引:
        1)主键自动建立唯一索引。
        2)频繁作为查询条件的字段应该创建索引。
        3)查询中与其他表关联的字段，外键关系建立索引。
        4)单键/组合索引的选择问题，组合索引性价比更高。
        5)查询中排序的字段，排序字段若通过索引去访问将大大提高排序速度。
        6)查询中统计或者分组字段。 
    7.那些情况下不需要创建索引:
        1)表的记录太少。
        2)经常增删改的表或者字段。
            Why:提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。
            因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件
        3)where条件里用不到的字段不创建索引。
        4)过滤性不好的不适合建索引。
二.性能分析(explain):
    1.是什么?(查看执行计划)
        使用EXPLAIN关键字可以模拟优化器执行SQL查询语句，从而知道MySQL是
        如何处理你的SQL语句的。分析你的查询语句或是表结构的性能瓶颈
    2.能干嘛?
        1)表的读取顺序
        2)哪些索引可以使用
        3)数据读取操作的操作类型
        4)哪些索引被实际使用
        5)表之间的引用
        6)每张表有多少行被物理查询
    3.怎么玩?
        1)建表脚本:
            CREATE TABLE t1(
                id INT(10) AUTO_INCREMENT,
                content VARCHAR(100) NULL , 
                PRIMARY KEY(id)
            );

            CREATE TABLE t2(
                id INT(10) AUTO_INCREMENT,
                content  VARCHAR(100) NULL , 
                PRIMARY KEY(id)
            );

            CREATE TABLE t3(
                id INT(10) AUTO_INCREMENT,
                content VARCHAR(100) NULL , 
                PRIMARY KEY(id)
            );

            CREATE TABLE t4(
                id INT(10) AUTO_INCREMENT,
                content VARCHAR(100) NULL , 
                PRIMARY KEY(id)
            );
             
            INSERT INTO t1(content) VALUES(CONCAT('t1_',FLOOR(1+RAND()*1000)));
            INSERT INTO t2(content) VALUES(CONCAT('t2_',FLOOR(1+RAND()*1000)));
            INSERT INTO t3(content) VALUES(CONCAT('t3_',FLOOR(1+RAND()*1000)));
            INSERT INTO t4(content) VALUES(CONCAT('t4_',FLOOR(1+RAND()*1000)));
        2) explain + sql语句。
    4.各个字段的解释:
        1)id:
            ①select查询的序列号,包含一组数字，表示查询中执行select子句或操作表的顺序。
            ②三种情况:
                id相同，执行顺序由上至下。
                id不同，如果是子查询，id的序号会递增，id值越大优先级越高，越先被执行
                id相同不同，同时存在。
            ③关注点:
                id号每个号码，表示一趟独立的查询。一个sql 的查询趟数越少越好。
        2)select_type(不是重点):
            ①查询的类型，主要是用于区别
                普通查询、联合查询、子查询等的复杂查询
          		    SIMPLE:
          			    简单的 select 查询,查询中不包含子查询或者UNION
          		    PRIMARY:
          			    查询中若包含任何复杂的子部分，最外层查询则被标记为Primary
          		    DERIVED:
          			    在FROM列表中包含的子查询被标记为DERIVED(衍生)
                        MySQL会递归执行这些子查询, 把结果放在临时表里。
          		    SUBQUERY:
          			    在SELECT或WHERE列表中包含了子查询
          		    DEPENDENT SUBQUERY:
          			    在SELECT或WHERE列表中包含了子查询,子查询基于外层
          		    UNCACHEABLE SUBQUREY:
          		        当子查询中含有系统变量。所导致的结果:无法缓存。
          		    UNION:
          			    若第二个SELECT出现在UNION之后，则被标记为UNION;
          			    若UNION包含在FROM子句的子查询中,外层SELECT将被标记为：DERIVED
          		    UNION RESULT:
          			    从UNION表获取结果的SELECT
        3)table(不是重点):
          	显示这一行的数据是关于哪张表的。
        4)type(重点):
            显示查询使用了何种类型，
            从最好到最差依次是：
                system > const > eq_ref > ref > fulltext > ref_or_null > index_merge > unique_subquery > index_subquery > range > index > ALL 
          		system
          		    表只有一行记录（等于系统表），这是const类型的特列，平时不会出现，这个也可以忽略不计。
          		const
          		    表示通过索引一次就找到了,const用于比较primary key或者unique索引。因为只匹配一行数据，
          		    所以很快如将主键置于where列表中，MySQL就能将该查询转换为一个常量。
          		eq_ref
          			唯一性索引扫描，对于每个索引键，表中只有一条记录与之匹配。常见于主键或唯一索引扫描。
          		ref
          		    非唯一性索引扫描，返回匹配某个单独值的所有行.本质上也是一种索引访问，
          		    它返回所有匹配某个单独值的行，然而,它可能会找到多个符合条件的行，
          		    所以他应该属于查找和扫描的混合体
          		range
          			只检索给定范围的行,使用一个索引来选择行。key 列显示使用了哪个索引
                    一般就是在你的where语句中出现了between、<、>、in等的查询
                    这种范围扫描索引扫描比全表扫描要好，因为它只需要开始于索引的某一点，而结束语另一点，不用扫描全部索引。
          		index
          			出现index是sql使用了索引但是没用通过索引进行过滤，一般是使用了覆盖索引或者是利用索引进行了排序分组。
          		all
          			Full Table Scan，将遍历全表以找到匹配的行。
          	以下几个不经常出现:
          		index_merge
          			在查询过程中需要多个索引组合使用，通常出现在有or的关键字的sql中。
          		ref_or_null
          			对于某个字段既需要关联条件，也需要null值得情况下。查询优化器会选择用ref_or_null连接查询。
          		index_subquery
          			利用索引来关联子查询，不再全表扫描。
          		unique_subquery
          			该联接类型类似于index_subquery。 子查询中的唯一索引。
          	备注：一般来说，得保证查询至少达到range级别，最好能达到ref。
        5)possible_keys:
            显示可能应用在这张表中的索引，一个或多个。
            查询涉及到的字段上若存在索引，则该索引将被列出，但不一定被查询实际使用
        6)key:
            实际使用的索引。如果为NULL，则没有使用索引。
            查询中若使用了覆盖索引，则该索引和查询的select字段重叠。
        7)key_len(越长越好):
          	表示索引中使用的字节数，可通过该列计算查询中使用的索引的长度。
          	key_len字段能够帮你检查是否充分的利用上了索引。
            如何计算:
                ①先看索引上字段的类型+长度
                比如:int=4 ;varchar(20) =20;char(20) =20  
                ②如果是varchar或者char这种字符串字段,视字符集要乘不同的值，
                比如utf-8  要乘 3,GBK要乘2，
                ③varchar这种动态字符串要加2个字节
                ④允许为空的字段要加1个字节  
        8)re(不是重点):
            显示索引的哪一列被使用了，如果可能的话，是一个常数。哪些列或常量被用于查找索引列上的值
        9)rows(越少越好):
          	rows列显示MySQL认为它执行查询时必须检查的行数。
        10)Extra:
           	包含不适合在其他列中显示但十分重要的额外信息
           		Using filesort(要优化的)
           			说明mysql会对数据使用一个外部的索引排序，而不是按照表内的索引顺序进行读取。
                    MySQL中无法利用索引完成的排序操作称为“文件排序”
           		Using temporary(要优化的)
           			使了用临时表保存中间结果,MySQL在对查询结果排序时使用临时表。常见于排序order by和分组查询group by。
           		USING index
           		    表示相应的select操作中使用了覆盖索引(Covering Index)，避免访问了表的数据行，效率不错！
           		    如果同时出现using where，表明索引被用来执行索引键值的查找;
           		    如果没有同时出现using where，表明索引只是用来读取数据而非利用索引执行查找。利用索引进行了排序或分组。
           		Using where
           			表明使用了where过滤。
           		using join buffer(要优化的)
           			使用了连接缓存。
           		impossible where
           			where子句的值总是false，不能用来获取任何元组。
           		select tables optimized away
           		    在没有GROUPBY子句的情况下，基于索引优化MIN/MAX操作或者对于MyISAM存储引擎优化COUNT(*)操作，
           		    不必等到执行阶段再进行计算，查询执行计划生成的阶段即完成优化。
四.查询优化:
    1.批量数据脚本:
        1)往表里插入50w数据
            ①建表:
                 CREATE TABLE `dept` (
                    `id` INT(11) NOT NULL AUTO_INCREMENT,
                    `deptName` VARCHAR(30) DEFAULT NULL,
                    `address` VARCHAR(40) DEFAULT NULL,
                    ceo INT NULL ,
                    PRIMARY KEY(`id`)
                ) ENGINE=INNODB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;
                 
                CREATE TABLE `emp` (
                    `id` INT(11) NOT NULL AUTO_INCREMENT,
                    `empno` INT NOT NULL ,
                    `name` VARCHAR(20) DEFAULT NULL,
                    `age` INT(3) DEFAULT NULL,
                    `deptId` INT(11) DEFAULT NULL,
                    PRIMARY KEY(`id`)
                    #CONSTRAINT `fk_dept_id` FOREIGN KEY(`deptId`) REFERENCES `t_dept`(`id`)
                ) ENGINE=INNODB AUTO_INCREMENT=1 DEFAULT CHARSET=utf8;

            ②设置参数log_bin_trust_function_creators:
                创建函数，假如报错：This function has none of DETERMINISTIC......
                # 由于开启过慢查询日志，因为我们开启了 bin-log, 我们就必须为我们的function指定一个参数。
                    show variables like 'log_bin_trust_function_creators';
                    set global log_bin_trust_function_creators=1;
                # 这样添加了参数以后，如果mysqld重启，上述参数又会消失，永久方法：
                    windows下:
                        my.ini[mysqld]加上log_bin_trust_function_creators=1 
                    linux下:
                        /etc/my.cnf下my.cnf
                        [mysqld]加上log_bin_trust_function_creators=1
            ③创建函数,保证每条数据都不同
            	随机产生字符串:
            	    DELIMITER $$
                    CREATE FUNCTION rand_string(n INT) RETURNS VARCHAR(255)
                     BEGIN
                       DECLARE chars_str VARCHAR(100) DEFAULT 'abcdefghijklmnopqrstuvwxyzABCDEFJHIJKLMNOPQRSTUVWXYZ';
                       DECLARE return_str VARCHAR(255) DEFAULT '';
                       DECLARE i INT DEFAULT 0;
                       WHILE i<n DO
                          SET return_str=CONCAT(return_str,SUBSTRING(chars_str,FLOOR(1+RAND()*52),1));
                          SET i=i+1;
                       END WHILE;
                       RETURN return_str;
                     END $$

            	    #假如要删除
            	    #drop function rand_string;

            	随机产生部门编号:
            	    #用于随机产生多少到多少的编号
                     DELIMITER $$
                     CREATE FUNCTION rand_num(from_num INT,to_num INT) RETURNS INT(11)
                      BEGIN
                        DECLARE i INT DEFAULT 0;
                        SET i = FLOOR(from_num+RAND()*(to_num-from_num+1));
                        RETURN i;
                      END $$

                    #假如要删除
                    #drop function rand_num;

            ④创建存储过程
            	创建往emp表中插入数据的存储过程:
            	    DELIMITER $$
                    CREATE PROCEDURE insert_emp(START INT,max_num INT)
                     BEGIN
                      DECLARE i INT DEFAULT 0;
                      #set autocommit =0 把autocommit设置成0  
                      SET autocommit=0;
                      REPEAT
                      SET i = i+1;
                      INSERT INTO emp(empno,NAME,age,deptid)
                      VALUES((START+i),rand_string(6),rand_num(30,50),rand_num(1,10000));
                      UNTIL i = max_num
                      END REPEAT;
                      COMMIT;
                     END $$ 
                     
                    #删除
                    # DELIMITER ;
                    # drop PROCEDURE insert_emp;
            	创建往dept表中插入数据的存储过程:
                    #执行存储过程，往dept表添加随机数据
                    DELIMITER $$
                    CREATE PROCEDURE `insert_dept`(max_num INT)
                     BEGIN
                      DECLARE i INT DEFAULT 0;
                      SET autocommit = 0;
                      REPEAT
                      SET i = i+1;
                      INSERT INTO dept(deptname,address,ceo)
                      VALUES(rand_string(8),rand_string(10),rand_num(1,500000));
                      UNTIL i = max_num
                      END REPEAT;
                      COMMIT;
                     END $$

                    #删除
                    # DELIMITER ;
                    # drop PROCEDURE insert_dept;
            ⑤调用存储过程
            	dept:
                    #执行存储过程，往dept表添加1万条数据
                    DELIMITER ;
                    CALL insert_dept(10000); 
            	emp:
            	    #执行存储过程，往emp表添加50万条数据
                    DELIMITER ;
                    CALL insert_emp(100000,500000); 
        2)批量删除某个表上的所有索引:
          	①存储过程:
          	    注意：
          	        取某个表的索引名称 保存到一个集合中
          	        information_schema 元数据 meta-DATA 描述数据的数据
          	        循环这个集合，利用游标。
          	        把一个字符串的sql语句转化成sql命令来执行，利用预编译执行字符串sql
          	    DELIMITER $$
                CREATE PROCEDURE `proc_drop_index`(dbname VARCHAR(200),tablename VARCHAR(200))
                 BEGIN
                  DECLARE done INT DEFAULT 0;
                  DECLARE ct INT DEFAULT 0;
                  DECLARE _index VARCHAR(200) DEFAULT '';
                  DECLARE _cur CURSOR FOR SELECT index_name
                  FROM information_schema.STATISTICS
                  WHERE table_schema = dbname
                  AND table_name = tablename
                  AND seq_in_index =1
                  AND index_name <> 'PRIMARY';
                  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 2;
                  OPEN _cur;
                  FETCH _cur INTO _index;
                  WHILE _index<>'' DO
                    SET @str = CONCAT(" drop index ",_index," on ",tablename);
                    PREPARE sql_str FROM @str;
                    EXECUTE sql_str;
                    DEALLOCATE PREPARE sql_str;
                    SET _index = '';
                    FETCH _cur INTO _index;
                  END WHILE;
                  CLOSE _cur;
                 END $$
          	②执行存储过程:
          	    DELIMITER ;
                CALL proc_drop_index("dbname","tablename");
    2.使用索引
        1)案例(索引失效)
        	①全值匹配我最爱:
        	    EXPLAIN SELECT SQL_NO_CACHE * FROM emp WHERE emp.age = 30 ; #0.007

                EXPLAIN SELECT SQL_NO_CACHE * FROM emp WHERE emp.age = 30 AND deptid = 4 ;#0.042

                EXPLAIN SELECT SQL_NO_CACHE * FROM emp WHERE emp.age = 30 AND deptid = 4 AND emp.name = 'abcd'; #0.044
        		建立索引:
        		    CREATE INDEX inx_age ON emp(age);

                    CREATE INDEX inx_age_deptid ON emp(age,deptid);

                    CREATE INDEX inx_age_deptid_name ON emp(age,deptid,NAME);

        	②最佳左前缀法则
        		如果索引了多列，要遵守最左前缀法则。指的是查询从索引的最左前列开始并且不跳过索引中的列。

        	③不在索引列上做任何操作（计算、函数、(自动or手动)类型转换），会导致索引失效而转向全表扫描
        	    EXPLAIN	SELECT SQL_NO_CACHE * FROM emp WHERE emp.name LIKE 'abc%';

                EXPLAIN	SELECT SQL_NO_CACHE * FROM emp WHERE LEFT(emp.name,3) = 'abc';

                CREATE INDEX idx_name ON emp(NAME);

        	④存储引擎不能使用索引中范围条件右边的列
                EXPLAIN	SELECT SQL_NO_CACHE * FROM emp WHERE emp.age = 30 AND emp.deptId>20 AND emp.name = 'abc';

                CREATE INDEX idx_age_deptid_name ON emp(age,deptid,NAME);

                CREATE INDEX idx_age_name_deptid ON emp(age,NAME,deptid);

        	⑤mysql 在使用不等于(!= 或者<>)的时候无法使用索引会导致全表扫描
                CREATE INDEX idx_name ON emp(NAME);

                EXPLAIN SELECT SQL_NO_CACHE * FROM emp WHERE emp.name <> 'abc';

        	⑥is not null 也无法使用索引,但是is null是可以使用索引的
                CREATE INDEX idx_age ON emp(age);

                EXPLAIN SELECT * FROM emp WHERE age IS NULL;

                EXPLAIN SELECT * FROM emp WHERE age IS NOT NULL

        	⑦like以通配符开头('%abc...')mysql索引失效会变成全表扫描的操作
                CREATE INDEX idx_name ON emp(NAME);

                EXPLAIN SELECT SQL_NO_CACHE * FROM emp WHERE emp.name LIKE 'abc%';

                EXPLAIN SELECT SQL_NO_CACHE * FROM emp WHERE emp.name LIKE '%abc%';

        	⑧字符串不加单引号索引失效
                CREATE INDEX idx_name ON emp(NAME);

                EXPLAIN SELECT SQL_NO_CACHE * FROM emp WHERE emp.name = '123';

                EXPLAIN SELECT SQL_NO_CACHE * FROM emp WHERE emp.name = 123 ;

        	⑨小总结
            假设index(a,b,c)
            where语句                         索引是否被使用

            where a = 3                         Y,使用到a

            where a = 3 and b = 5               Y,使用到a,b

            where a = 3 and b = 5               Y,使用到a,b
            and c =4                            ,c

            where b = 3或者 where
            b = 3 and c = 4 或者                  N
            where c = 4

            where a = 3 and c = 5               使用到a,但是c不可以，b中间断了

            where a = 3 and b > 4               使用到a和b,c不能用在范围
            and c = 5                           之后，b断了

            where a is null and b               is null 支持索引 但是is nuot
            is not null                         null 不支持，所以a可以使用索引，
                                                但是b不可以使用

            where a <> 3                        不能使用索引

            where abs(a) = 3                    不能使用索引

            where a = 3 and b like              Y,使用到a,b,c
            'kk%' and c = 4

            where a = 3 and b like              Y,只用到a
            '%kk' and c = 4

            where a = 3 and b like              Y,只用到a
            '%kk%' and c = 4

            where a = 3 and b like              Y,使用到a,b,c
            'k%kk%' and c = 4
        2)一般性建议:
        	①对于单键索引，尽量选择针对当前query过滤性更好的索引
        	②在选择组合索引的时候，当前Query中过滤性最好的字段在索引字段顺序中，位置越靠前越好。
        	③在选择组合索引的时候，尽量选择可以能够包含当前query中的where字句中更多字段的索引
        	④在选择组合索引的时候，如果某个字段可能出现范围查询时，尽量把这个字段放在索引次序的最后面
        	⑤书写sql语句时，尽量避免造成索引失效的情况
    3.关联查询优化:
      	1)建表SQL:
            CREATE TABLE IF NOT EXISTS `class` (
            `id` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
            `card` INT(10) UNSIGNED NOT NULL,
            PRIMARY KEY (`id`)
            );
            CREATE TABLE IF NOT EXISTS `book` (
            `bookid` INT(10) UNSIGNED NOT NULL AUTO_INCREMENT,
            `card` INT(10) UNSIGNED NOT NULL,
            PRIMARY KEY (`bookid`)
            );


            INSERT INTO class(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO class(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO class(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO class(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO class(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO class(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO class(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO class(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO class(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO class(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO class(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO class(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO class(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO class(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO class(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO class(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO class(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO class(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO class(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO class(card) VALUES(FLOOR(1 + (RAND() * 20)));


            INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));
            INSERT INTO book(card) VALUES(FLOOR(1 + (RAND() * 20)));
      	2)建议:
      		①保证被驱动表的join字段已经被索引
      		②left join 时，选择小表作为驱动表，大表作为被驱动表。
      		③inner join 时，mysql会自己帮你把小结果集的表选为驱动表。
      		④子查询尽量不要放在被驱动表，有可能使用不到索引。
      		⑤能够直接多表关联的尽量直接关联，不用子查询。
      		⑥子查询尽量放到驱动表 把被驱动表使用索引的机会留给实体表
        3)上次留下的性能问题:
            ①三次全表扫描
                SELECT a.name,cb.name ceoname
                FROM t_emp a
                LEFT JOIN(
                SELECT b.id ,b.ceo,c.name
                FROM t_emp c
                INNER JOIN t_dept b
                ON b.CEO = c.id
                )cb
                ON cb.id = a.deptId;
            ②两种全表扫描
                SELECT ab.name,c.name ceoname
                FROM(
                SELECT a.name,b.ceo
                FROM t_emp a
                LEFT JOIN t_dept b
                ON a.deptId = b.id
                )ab
                LEFT JOIN t_emp c
                ON c.id = ab.ceo;
            ③一次全表扫描
                SELECT a.name,(
                SELECT c.name
                FROM t_emp c
                WHERE c.id = b.ceo
                ) ceoname
                FROM t_emp a
                LEFT JOIN t_dept b
                ON a.deptId = b.id;
            ④一次全表扫描
                SELECT a.name,c.name ceoname
                FROM t_emp a
                LEFT JOIN t_dept b
                ON a.deptId = b.id
                LEFT JOIN t_emp c
                ON b.CEO = c.id;
    4.子查询优化:
        案例:取所有不为掌门人的员工，按年龄分组

            SELECT age,COUNT(*) FROM emp a WHERE
            a.id NOT IN(
               SELECT ceo FROM dept b WHERE CEO IS NOT NULL
            )GROUP BY age;

            SELECT SQL_NO_CACHE a.age,COUNT(*) FROM emp a
            LEFT JOIN dept b ON a.id = b.CEO
            WHERE b.id IS NULL GROUP BY age;

        注意:尽量不要使用not in  或者 not exists
        用left outer join  on  xxx is null 替代
    5.order by 关键字优化:
        	1)尽可能在索引列上完成排序操作，遵照索引建的最佳左前缀
        		case:
        		    create index idx_age_deptid_name on emp (age,deptid,name);
        	        以下是否能使用到索引，能否去掉using filesort:
                    #无过滤 必排序
                        ①没有使用索引。
                            explain  select * from emp order by age,deptid; 
                        ②使用上索引(使用上了过滤)
                            explain  select * from emp order by age,deptid limit 10; 
                    #顺序错 必排序
                        ③使用上索引
                            explain  select * from emp where age=45 order by deptid;
                        ④使用上索引
                            explain  select * from emp where age=45 order by deptid,name; 
                        ⑤没有使用索引
                            explain  select * from emp where age=45 order by deptid,empno;
                        ⑥没有使用索引
                            explain  select * from emp where age=45 order by name,deptid;
                        ⑦没有使用索引
                            explain select * from emp where deptid=45 order by age;
                    #值确定，不排序
                        ⑧使用上索引
                            explain  select * from emp where age=45 order by age,deptid;
                        ⑨使用上索引
                            explain  select * from emp where age=45 order by deptid,age
                    #方向反 必排序
                        ⑩使用上索引
                            explain select * from emp where age=45 order by  deptid desc, name desc ;
                        ⑪没有使用上索引
                            explain select * from emp where age=45 order by  deptid asc, name desc ;
        	2)ORDER BY子句，尽量使用Index方式排序,避免使用FileSort方式排序
        	3)如果不在索引列上，filesort有两种算法(mysql就要启动双路排序和单路排序)：
        		①双路排序
        		    MySQL 4.1之前是使用双路排序,字面意思就是两次扫描磁盘，最终得到数据，读取行指针和orderby列，对他们进行排序，
        		    然后扫描已经排序好的列表，按照列表中的值重新从列表中读取对应的数据输出。
        		    从磁盘取排序字段，在buffer进行排序，再从磁盘取其他字段。取一批数据，要对磁盘进行了两次扫描，
        		    众所周知，I\O是很耗时的，所以在mysql4.1之后，出现了第二种改进的算法，就是单路排序。
        		②单路排序
        			从磁盘读取查询需要的所有列，按照order by列在buffer对它们进行排序，然后扫描排序后的列表进行输出，
        			它的效率更快一些，避免了第二次读取数据。并且把随机IO变成了顺序IO,但是它会使用更多的空间，
        			因为它把每一行都保存在内存中了。
        		③结论及引申出的问题
        			由于单路是后出的，总体而言好过双路
        			但是用单路有问题
        		④优化策略(在mysql的配置文件下):
        			增大sort_buffer_size参数的设置(排序缓存大小)
        			增大max_length_for_sort_data参数的设置(最大的单路排序数据)
        			减少select 后面的查询的字段。
        			Why:
        			    提高Order By的速度
                        (1)Order by时select * 是一个大忌只Query需要的字段， 这点非常重要。在这里的影响是：
                            (1.1) 当Query的字段大小总和小于max_length_for_sort_data 而且排序字段不是 TEXT|BLOB 类型时，
                                  会用改进后的算法——单路排序，
                                  否则用老算法——多路排序。
                            (1.2) 两种算法的数据都有可能超出sort_buffer的容量，
                                  超出之后，会创建tmp文件进行合并排序，导致多次I/O，但是用单路排序算法的风险会更大一些,
                                  所以要提高sort_buffer_size。
                        (2)尝试提高 sort_buffer_size
                            不管用哪种算法，提高这个参数都会提高效率，当然，要根据系统的能力去提高，因为这个参数是针对每个进程的  
                            1M-8M之间调整
                        (3)尝试提高 max_length_for_sort_data
                            提高这个参数， 会增加用改进算法的概率。但是如果设的太高，数据总容量超出sort_buffer_size的概率就增大，
                            明显症状是高的磁盘I/O活动和低的处理器使用率.                  
                            1024-8192之间调整
    6.GROUP BY关键字优化:
      	1)group by实质是先排序后进行分组，遵照索引建的最佳左前缀
      	2)当无法使用索引列，增大max_length_for_sort_data参数的设置+增大sort_buffer_size参数的设置
      	3)where高于having，能写在where限定的条件就不要去having限定了。
      	4)group by 使用索引的原则几乎跟order by一致 ，唯一区别是group by 即使没有过滤条件用到索引，也可以直接使用索引。                     
    7.索引的选择:
      	1)执行案例前先清除emp上的索引，只留主键
      	2)索引的选择:
      	    #查询 年龄为30岁的，且员工编号小于101000的用户，按用户名称排序
                SELECT SQL_NO_CACHE * FROM emp WHERE age =30 AND empno <101000 ORDER BY NAME ;
            #结论：很显然,type 是 ALL,即最坏的情况。Extra 里还出现了 Using filesort,也是最坏的情况。优化是必须的。
            #开始优化：
            思路：尽量让where的过滤条件和排序使用上索引
            但是一共两个字段(deptno,empno)上有过滤条件，一个字段(ename)有索引 
            ①我们建一个三个字段的组合索引可否？
                CREATE INDEX idx_age_empno_name ON emp(age,empno,NAME);
                我们发现using filesort 依然存在，所以name 并没有用到索引。
                原因是因为empno是一个范围过滤，所以索引后面的字段不会再使用索引了。
                所以我们建一个3值索引是没有意义的 
                那么我们先删掉这个索引，DROP INDEX idx_age_empno_name ON emp
            ②为了去掉filesort我们可以把索引建成
                CREATE INDEX idx_age_name ON emp(age,NAME);
                也就是说empno 和name这个两个字段我只能二选其一。
                这样我们优化掉了 using filesort。
                执行一下sql
                速度果然提高了4倍。
            ③但是如果我们选择那个范围过滤，而放弃排序上的索引呢
                DROP INDEX idx_age_name ON emp
                create index idx_age_eno on emp(age,empno); 
                果然出现了filesort，而且type还是range光看字面其实并不美好。
            ④我们来执行以下sql
                结果竟然有 filesort的 sql 运行速度，超过了已经优化掉 filesort的 sql ，而且快了好多倍。何故？
                原因是所有的排序都是在条件过滤之后才执行的，所以如果条件过滤了大部分数据的话，几百几千条数据进行排序其实并不是很消耗性能，
                即使索引优化了排序但实际提升性能很有限。  相对的 empno<101000 这个条件如果没有用到索引的话，要对几万条的数据进行扫描，
                这是非常消耗性能的，所以索引放在这个字段上性价比最高，是最优选择。
            ④结论:当范围条件和group by 或者 order by  的字段出现二选一时 ，优先观察条件字段的过滤数量，
                如果过滤的数据足够多，而需要排序的数据并不多时，优先把索引放在范围字段上。反之，亦然。
        3)最后使用索引的手段：覆盖索引
            什么是覆盖索引？
            简单说就是，select 到 from 之间查询的列 <=使用的索引列+主键     